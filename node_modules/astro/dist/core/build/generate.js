import * as colors from "kleur/colors";
import { bgGreen, black, cyan, dim, green, magenta } from "kleur/colors";
import fs from "node:fs";
import { fileURLToPath } from "node:url";
import {
  generateImage as generateImageInternal,
  getStaticImageList
} from "../../assets/generate.js";
import {
  eachPageDataFromEntryPoint,
  eachRedirectPageData,
  hasPrerenderedPages
} from "../../core/build/internal.js";
import {
  isRelativePath,
  prependForwardSlash,
  removeLeadingForwardSlash,
  removeTrailingForwardSlash
} from "../../core/path.js";
import { runHookBuildGenerated } from "../../integrations/index.js";
import { isServerLikeOutput } from "../../prerender/utils.js";
import { BEFORE_HYDRATION_SCRIPT_ID, PAGE_SCRIPT_ID } from "../../vite-plugin-scripts/index.js";
import { callEndpoint, throwIfRedirectNotAllowed } from "../endpoint/index.js";
import { AstroError, AstroErrorData } from "../errors/index.js";
import { debug, info } from "../logger/core.js";
import {
  getRedirectLocationOrThrow,
  RedirectSinglePageBuiltModule,
  routeIsRedirect
} from "../redirects/index.js";
import { createEnvironment, createRenderContext, tryRenderPage } from "../render/index.js";
import { callGetStaticPaths } from "../render/route-cache.js";
import {
  createAssetLink,
  createModuleScriptsSet,
  createStylesheetElementSet
} from "../render/ssr-element.js";
import { createRequest } from "../request.js";
import { matchRoute } from "../routing/match.js";
import { getOutputFilename } from "../util.js";
import { getOutDirWithinCwd, getOutFile, getOutFolder } from "./common.js";
import {
  cssOrder,
  getEntryFilePathFromComponentPath,
  getPageDataByComponent,
  mergeInlineCss
} from "./internal.js";
import { getTimeStat } from "./util.js";
function createEntryURL(filePath, outFolder) {
  return new URL("./" + filePath + `?time=${Date.now()}`, outFolder);
}
async function getEntryForRedirectRoute(route, internals, outFolder) {
  if (route.type !== "redirect") {
    throw new Error(`Expected a redirect route.`);
  }
  if (route.redirectRoute) {
    const filePath = getEntryFilePathFromComponentPath(internals, route.redirectRoute.component);
    if (filePath) {
      const url = createEntryURL(filePath, outFolder);
      const ssrEntryPage = await import(url.toString());
      return ssrEntryPage;
    }
  }
  return RedirectSinglePageBuiltModule;
}
function shouldSkipDraft(pageModule, settings) {
  var _a;
  return (
    // Drafts are disabled
    !settings.config.markdown.drafts && // This is a draft post
    "frontmatter" in pageModule && ((_a = pageModule.frontmatter) == null ? void 0 : _a.draft) === true
  );
}
function rootRelativeFacadeId(facadeId, settings) {
  return facadeId.slice(fileURLToPath(settings.config.root).length);
}
function chunkIsPage(settings, output, internals) {
  if (output.type !== "chunk") {
    return false;
  }
  const chunk = output;
  if (chunk.facadeModuleId) {
    const facadeToEntryId = prependForwardSlash(
      rootRelativeFacadeId(chunk.facadeModuleId, settings)
    );
    return internals.entrySpecifierToBundleMap.has(facadeToEntryId);
  }
  return false;
}
async function generatePages(opts, internals) {
  const timer = performance.now();
  const ssr = isServerLikeOutput(opts.settings.config);
  const outFolder = ssr ? opts.settings.config.build.server : getOutDirWithinCwd(opts.settings.config.outDir);
  if (ssr && !hasPrerenderedPages(internals))
    return;
  const verb = ssr ? "prerendering" : "generating";
  info(opts.logging, null, `
${bgGreen(black(` ${verb} static routes `))}`);
  const builtPaths = /* @__PURE__ */ new Set();
  if (ssr) {
    for (const [pageData, filePath] of eachPageDataFromEntryPoint(internals)) {
      if (pageData.route.prerender) {
        const ssrEntryURLPage = createEntryURL(filePath, outFolder);
        const ssrEntryPage = await import(ssrEntryURLPage.toString());
        if (opts.settings.config.build.split) {
          const manifest = ssrEntryPage.manifest;
          const ssrEntry = manifest == null ? void 0 : manifest.pageModule;
          if (ssrEntry) {
            await generatePage(opts, internals, pageData, ssrEntry, builtPaths, manifest);
          } else {
            throw new Error(
              `Unable to find the manifest for the module ${ssrEntryURLPage.toString()}. This is unexpected and likely a bug in Astro, please report.`
            );
          }
        } else {
          const ssrEntry = ssrEntryPage;
          const manifest = createBuildManifest(opts.settings, internals, ssrEntry.renderers);
          await generatePage(opts, internals, pageData, ssrEntry, builtPaths, manifest);
        }
      }
    }
    for (const pageData of eachRedirectPageData(internals)) {
      const entry = await getEntryForRedirectRoute(pageData.route, internals, outFolder);
      const manifest = createBuildManifest(opts.settings, internals, entry.renderers);
      await generatePage(opts, internals, pageData, entry, builtPaths, manifest);
    }
  } else {
    for (const [pageData, filePath] of eachPageDataFromEntryPoint(internals)) {
      const ssrEntryURLPage = createEntryURL(filePath, outFolder);
      const entry = await import(ssrEntryURLPage.toString());
      const manifest = createBuildManifest(opts.settings, internals, entry.renderers);
      await generatePage(opts, internals, pageData, entry, builtPaths, manifest);
    }
    for (const pageData of eachRedirectPageData(internals)) {
      const entry = await getEntryForRedirectRoute(pageData.route, internals, outFolder);
      const manifest = createBuildManifest(opts.settings, internals, entry.renderers);
      await generatePage(opts, internals, pageData, entry, builtPaths, manifest);
    }
  }
  if (opts.settings.config.experimental.assets) {
    info(opts.logging, null, `
${bgGreen(black(` generating optimized images `))}`);
    for (const imageData of getStaticImageList()) {
      await generateImage(opts, imageData[1].options, imageData[1].path);
    }
    delete globalThis.astroAsset.addStaticImage;
  }
  await runHookBuildGenerated({
    config: opts.settings.config,
    logging: opts.logging
  });
  info(opts.logging, null, dim(`Completed in ${getTimeStat(timer, performance.now())}.
`));
}
async function generateImage(opts, transform, path) {
  let timeStart = performance.now();
  const generationData = await generateImageInternal(opts, transform, path);
  if (!generationData) {
    return;
  }
  const timeEnd = performance.now();
  const timeChange = getTimeStat(timeStart, timeEnd);
  const timeIncrease = `(+${timeChange})`;
  const statsText = generationData.cached ? `(reused cache entry)` : `(before: ${generationData.weight.before}kb, after: ${generationData.weight.after}kb)`;
  info(opts.logging, null, `  ${green("\u25B6")} ${path} ${dim(statsText)} ${dim(timeIncrease)}`);
}
async function generatePage(opts, internals, pageData, ssrEntry, builtPaths, manifest) {
  if (routeIsRedirect(pageData.route) && !opts.settings.config.experimental.redirects) {
    throw new Error(`To use redirects first set experimental.redirects to \`true\``);
  }
  let timeStart = performance.now();
  const pageInfo = getPageDataByComponent(internals, pageData.route.component);
  const linkIds = [];
  const scripts = (pageInfo == null ? void 0 : pageInfo.hoistedScript) ?? null;
  const styles = pageData.styles.sort(cssOrder).map(({ sheet }) => sheet).reduce(mergeInlineCss, []);
  const pageModulePromise = ssrEntry.page;
  const onRequest = ssrEntry.onRequest;
  if (!pageModulePromise) {
    throw new Error(
      `Unable to find the module for ${pageData.component}. This is unexpected and likely a bug in Astro, please report.`
    );
  }
  const pageModule = await pageModulePromise();
  if (shouldSkipDraft(pageModule, opts.settings)) {
    info(opts.logging, null, `${magenta("\u26A0\uFE0F")}  Skipping draft ${pageData.route.component}`);
    return;
  }
  const generationOptions = {
    pageData,
    internals,
    linkIds,
    scripts,
    styles,
    mod: pageModule
  };
  const icon = pageData.route.type === "page" ? green("\u25B6") : magenta("\u03BB");
  if (isRelativePath(pageData.route.component)) {
    info(opts.logging, null, `${icon} ${pageData.route.route}`);
  } else {
    info(opts.logging, null, `${icon} ${pageData.route.component}`);
  }
  const paths = await getPathsForRoute(pageData, pageModule, opts, builtPaths);
  for (let i = 0; i < paths.length; i++) {
    const path = paths[i];
    await generatePath(path, opts, generationOptions, manifest, onRequest);
    const timeEnd = performance.now();
    const timeChange = getTimeStat(timeStart, timeEnd);
    const timeIncrease = `(+${timeChange})`;
    const filePath = getOutputFilename(opts.settings.config, path, pageData.route.type);
    const lineIcon = i === paths.length - 1 ? "\u2514\u2500" : "\u251C\u2500";
    info(opts.logging, null, `  ${cyan(lineIcon)} ${dim(filePath)} ${dim(timeIncrease)}`);
  }
}
async function getPathsForRoute(pageData, mod, opts, builtPaths) {
  let paths = [];
  if (pageData.route.pathname) {
    paths.push(pageData.route.pathname);
    builtPaths.add(pageData.route.pathname);
  } else {
    const route = pageData.route;
    const staticPaths = await callGetStaticPaths({
      mod,
      route,
      routeCache: opts.routeCache,
      isValidate: false,
      logging: opts.logging,
      ssr: isServerLikeOutput(opts.settings.config)
    }).catch((err) => {
      debug("build", `\u251C\u2500\u2500 ${colors.bold(colors.red("\u2717"))} ${route.component}`);
      throw err;
    });
    const label = staticPaths.length === 1 ? "page" : "pages";
    debug(
      "build",
      `\u251C\u2500\u2500 ${colors.bold(colors.green("\u2714"))} ${route.component} \u2192 ${colors.magenta(
        `[${staticPaths.length} ${label}]`
      )}`
    );
    paths = staticPaths.map((staticPath) => {
      try {
        return route.generate(staticPath.params);
      } catch (e) {
        if (e instanceof TypeError) {
          throw getInvalidRouteSegmentError(e, route, staticPath);
        }
        throw e;
      }
    }).filter((staticPath) => {
      if (!builtPaths.has(removeTrailingForwardSlash(staticPath))) {
        return true;
      }
      const matchedRoute = matchRoute(staticPath, opts.manifest);
      return matchedRoute === route;
    });
    for (const staticPath of paths) {
      builtPaths.add(removeTrailingForwardSlash(staticPath));
    }
  }
  return paths;
}
function getInvalidRouteSegmentError(e, route, staticPath) {
  var _a, _b;
  const invalidParam = (_a = e.message.match(/^Expected "([^"]+)"/)) == null ? void 0 : _a[1];
  const received = invalidParam ? staticPath.params[invalidParam] : void 0;
  let hint = "Learn about dynamic routes at https://docs.astro.build/en/core-concepts/routing/#dynamic-routes";
  if (invalidParam && typeof received === "string") {
    const matchingSegment = (_b = route.segments.find(
      (segment) => {
        var _a2;
        return ((_a2 = segment[0]) == null ? void 0 : _a2.content) === invalidParam;
      }
    )) == null ? void 0 : _b[0];
    const mightBeMissingSpread = (matchingSegment == null ? void 0 : matchingSegment.dynamic) && !(matchingSegment == null ? void 0 : matchingSegment.spread);
    if (mightBeMissingSpread) {
      hint = `If the param contains slashes, try using a rest parameter: **[...${invalidParam}]**. Learn more at https://docs.astro.build/en/core-concepts/routing/#dynamic-routes`;
    }
  }
  return new AstroError({
    ...AstroErrorData.InvalidDynamicRoute,
    message: invalidParam ? AstroErrorData.InvalidDynamicRoute.message(
      route.route,
      JSON.stringify(invalidParam),
      JSON.stringify(received)
    ) : `Generated path for ${route.route} is invalid.`,
    hint
  });
}
function shouldAppendForwardSlash(trailingSlash, buildFormat) {
  switch (trailingSlash) {
    case "always":
      return true;
    case "never":
      return false;
    case "ignore": {
      switch (buildFormat) {
        case "directory":
          return true;
        case "file":
          return false;
      }
    }
  }
}
function addPageName(pathname, opts) {
  const trailingSlash = opts.settings.config.trailingSlash;
  const buildFormat = opts.settings.config.build.format;
  const pageName = shouldAppendForwardSlash(trailingSlash, buildFormat) ? pathname.replace(/\/?$/, "/").replace(/^\//, "") : pathname.replace(/^\//, "");
  opts.pageNames.push(pageName);
}
function getUrlForPath(pathname, base, origin, format, routeType) {
  const ending = format === "directory" ? "/" : ".html";
  let buildPathname;
  if (pathname === "/" || pathname === "") {
    buildPathname = base;
  } else if (routeType === "endpoint") {
    const buildPathRelative = removeLeadingForwardSlash(pathname);
    buildPathname = base + buildPathRelative;
  } else {
    const buildPathRelative = removeTrailingForwardSlash(removeLeadingForwardSlash(pathname)) + ending;
    buildPathname = base + buildPathRelative;
  }
  const url = new URL(buildPathname, origin);
  return url;
}
async function generatePath(pathname, opts, gopts, manifest, onRequest) {
  const { settings, logging, origin, routeCache } = opts;
  const { mod, internals, scripts: hoistedScripts, styles: _styles, pageData } = gopts;
  if (pageData.route.type === "page") {
    addPageName(pathname, opts);
  }
  debug("build", `Generating: ${pathname}`);
  const links = /* @__PURE__ */ new Set();
  const scripts = createModuleScriptsSet(
    hoistedScripts ? [hoistedScripts] : [],
    manifest.base,
    manifest.assetsPrefix
  );
  const styles = createStylesheetElementSet(_styles, manifest.base, manifest.assetsPrefix);
  if (settings.scripts.some((script) => script.stage === "page")) {
    const hashedFilePath = internals.entrySpecifierToBundleMap.get(PAGE_SCRIPT_ID);
    if (typeof hashedFilePath !== "string") {
      throw new Error(`Cannot find the built path for ${PAGE_SCRIPT_ID}`);
    }
    const src = createAssetLink(hashedFilePath, manifest.base, manifest.assetsPrefix);
    scripts.add({
      props: { type: "module", src },
      children: ""
    });
  }
  for (const script of settings.scripts) {
    if (script.stage === "head-inline") {
      scripts.add({
        props: {},
        children: script.content
      });
    }
  }
  const ssr = isServerLikeOutput(settings.config);
  const url = getUrlForPath(
    pathname,
    opts.settings.config.base,
    origin,
    opts.settings.config.build.format,
    pageData.route.type
  );
  const env = createEnvironment({
    adapterName: manifest.adapterName,
    logging,
    markdown: manifest.markdown,
    mode: opts.mode,
    renderers: manifest.renderers,
    clientDirectives: manifest.clientDirectives,
    compressHTML: manifest.compressHTML,
    async resolve(specifier) {
      const hashedFilePath = manifest.entryModules[specifier];
      if (typeof hashedFilePath !== "string") {
        if (specifier === BEFORE_HYDRATION_SCRIPT_ID) {
          return "";
        }
        throw new Error(`Cannot find the built path for ${specifier}`);
      }
      return createAssetLink(hashedFilePath, manifest.base, manifest.assetsPrefix);
    },
    routeCache,
    site: manifest.site,
    ssr,
    streaming: true
  });
  const renderContext = await createRenderContext({
    pathname,
    request: createRequest({ url, headers: new Headers(), logging, ssr }),
    componentMetadata: manifest.componentMetadata,
    scripts,
    styles,
    links,
    route: pageData.route,
    env,
    mod
  });
  let body;
  let encoding;
  if (pageData.route.type === "endpoint") {
    const endpointHandler = mod;
    const result = await callEndpoint(
      endpointHandler,
      env,
      renderContext,
      onRequest
    );
    if (result.type === "response") {
      throwIfRedirectNotAllowed(result.response, opts.settings.config);
      if (!result.response.body)
        return;
      const ab = await result.response.arrayBuffer();
      body = new Uint8Array(ab);
    } else {
      body = result.body;
      encoding = result.encoding;
    }
  } else {
    let response;
    try {
      response = await tryRenderPage(renderContext, env, mod, onRequest);
    } catch (err) {
      if (!AstroError.is(err) && !err.id && typeof err === "object") {
        err.id = pageData.component;
      }
      throw err;
    }
    if (response.status >= 300 && response.status < 400) {
      if (!opts.settings.config.build.redirects) {
        return;
      }
      const location = getRedirectLocationOrThrow(response.headers);
      const fromPath = new URL(renderContext.request.url).pathname;
      const delay = response.status === 302 ? 2 : 0;
      body = `<!doctype html>
<title>Redirecting to: ${location}</title>
<meta http-equiv="refresh" content="${delay};url=${location}">
<meta name="robots" content="noindex">
<link rel="canonical" href="${location}">
<body>
	<a href="${location}">Redirecting from <code>${fromPath}</code> to <code>${location}</code></a>
</body>`;
      if (pageData.route.type !== "redirect") {
        pageData.route.redirect = location;
      }
    } else {
      if (!response.body)
        return;
      body = await response.text();
    }
  }
  const outFolder = getOutFolder(settings.config, pathname, pageData.route.type);
  const outFile = getOutFile(settings.config, outFolder, pathname, pageData.route.type);
  pageData.route.distURL = outFile;
  await fs.promises.mkdir(outFolder, { recursive: true });
  await fs.promises.writeFile(outFile, body, encoding ?? "utf-8");
}
function createBuildManifest(settings, internals, renderers) {
  return {
    assets: /* @__PURE__ */ new Set(),
    entryModules: Object.fromEntries(internals.entrySpecifierToBundleMap.entries()),
    routes: [],
    adapterName: "",
    markdown: settings.config.markdown,
    clientDirectives: settings.clientDirectives,
    compressHTML: settings.config.compressHTML,
    renderers,
    base: settings.config.base,
    assetsPrefix: settings.config.build.assetsPrefix,
    site: settings.config.site ? new URL(settings.config.base, settings.config.site).toString() : settings.config.site,
    componentMetadata: internals.componentMetadata
  };
}
export {
  chunkIsPage,
  createBuildManifest,
  generatePages,
  rootRelativeFacadeId
};
