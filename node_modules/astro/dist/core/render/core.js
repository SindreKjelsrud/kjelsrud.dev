import { renderPage as runtimeRenderPage } from "../../runtime/server/index.js";
import { attachToResponse } from "../cookies/index.js";
import { createAPIContext } from "../endpoint/index.js";
import { callMiddleware } from "../middleware/callMiddleware.js";
import { redirectRouteGenerate, redirectRouteStatus, routeIsRedirect } from "../redirects/index.js";
import { createResult } from "./result.js";
async function renderPage({ mod, renderContext, env, cookies }) {
  if (routeIsRedirect(renderContext.route)) {
    return new Response(null, {
      status: redirectRouteStatus(renderContext.route, renderContext.request.method),
      headers: {
        location: redirectRouteGenerate(renderContext.route, renderContext.params)
      }
    });
  }
  const Component = mod.default;
  if (!Component)
    throw new Error(`Expected an exported Astro component but received typeof ${typeof Component}`);
  const result = createResult({
    adapterName: env.adapterName,
    links: renderContext.links,
    styles: renderContext.styles,
    logging: env.logging,
    markdown: env.markdown,
    params: renderContext.params,
    pathname: renderContext.pathname,
    componentMetadata: renderContext.componentMetadata,
    resolve: env.resolve,
    renderers: env.renderers,
    clientDirectives: env.clientDirectives,
    compressHTML: env.compressHTML,
    request: renderContext.request,
    site: env.site,
    scripts: renderContext.scripts,
    ssr: env.ssr,
    status: renderContext.status ?? 200,
    cookies,
    locals: renderContext.locals ?? {}
  });
  if (typeof mod.components === "object") {
    Object.assign(renderContext.props, { components: mod.components });
  }
  let response = await runtimeRenderPage(
    result,
    Component,
    renderContext.props,
    null,
    env.streaming,
    renderContext.route
  );
  if (result.cookies) {
    attachToResponse(response, result.cookies);
  }
  return response;
}
async function tryRenderPage(renderContext, env, mod, onRequest) {
  const apiContext = createAPIContext({
    request: renderContext.request,
    params: renderContext.params,
    props: renderContext.props,
    site: env.site,
    adapterName: env.adapterName
  });
  if (onRequest) {
    return await callMiddleware(
      env.logging,
      onRequest,
      apiContext,
      () => {
        return renderPage({
          mod,
          renderContext,
          env,
          cookies: apiContext.cookies
        });
      }
    );
  } else {
    return await renderPage({
      mod,
      renderContext,
      env,
      cookies: apiContext.cookies
    });
  }
}
export {
  tryRenderPage
};
